<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[TidyTuesday-week42-car.md]]></title>
    <url>%2F2019%2F10%2F16%2FTidyTuesday-week42-car-md%2F</url>
    <content type="text"><![CDATA[参考链接：https://github.com/gkaramanis/tidytuesday/blob/master/week-42/big-epa-cars.R ####################################################################### 学习到的技能（需要掌握的函数）####################################################################### pivot_longer() 函数: 宽数据变长数据。 forcats包 对于处理 factor 相关操作非常方便，绘图排序经常用到 row_number() 函数：通用排名，并列的名次结果按先后顺序不一样，靠前出现的元素排名在前 画图思路 数据清洗就不说了，一如既往的结合 filter() + group_by() + summarize() + ungroup() + mutate() 等常用函数 数据清洗 提一下: 在只看到这里数据清洗的视化并未理解为啥要产生 lane 这个变量，直到，看了后面可视化 geom_image(data = city_race, aes(x = lane, y = city_mpg_median, image = car), size= .05, asp = 0.6) 后，才发现原来是给图中的小车子标识位置，一种公路分两列，又一次跪拜。 12345678910111213141516171819202122232425262728293031323334353637# 没有这些包的先自行安装。library(tidyverse)library(here)library(ggimage)big_epa_cars &lt;- readr::read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-15/big_epa_cars.csv&quot;)city_race &lt;- big_epa_cars %&gt;% # pivot_longer() 函数将宽数据变为长数据，参数意思都是字面意思 pivot_longer(cols = c(&quot;city08&quot;, &quot;cityA08&quot;), names_to = &quot;city_fuel&quot;, values_to = &quot;city_mpg&quot;) %&gt;% filter(city_mpg &gt; 0) %&gt;% # 筛选 city_mpg 数值大于 1 的行 group_by(make) %&gt;% # 按照 make 列变量进行分组 summarize(city_mpg_median = median(city_mpg)) %&gt;% # 然后分别求出 make 列对应的每一组变量的 city_mpg 的平局值，这里其实就可以运用到我们的将候选基因分 bin 啊，然后在求出每个 bin 对应的候选基因的值的平均值、最大值、最小值等等。 ungroup() %&gt;% # 取消分组 mutate(make = fct_reorder(make, city_mpg_median)) %&gt;% # 将 make 对应的因子即变量按照 city_map_median 重新进行排序 # 详细见 R|数据处理|因子型数据 # https://ask.hellobi.com/blog/R_shequ/15408 top_n(10, city_mpg_median) %&gt;% # 取 city_mpg_median 前十个 arrange(city_mpg_median) %&gt;% # 按照 city_mpg_median 大小进行重新排序 mutate(lane = row_number() %% 2 * 2) # row_number 通用排名，并列的名次结果按先后顺序不一样，靠前出现的元素排名在前highway_race &lt;- big_epa_cars %&gt;% pivot_longer(cols = c(&quot;highway08&quot;, &quot;highwayA08&quot;), names_to = &quot;highway_fuel&quot;, values_to = &quot;highway_mpg&quot;) %&gt;% filter(highway_mpg &gt; 0) %&gt;% group_by(make) %&gt;% summarize(highway_mpg_median = median(highway_mpg)) %&gt;% ungroup() %&gt;% mutate(make = fct_reorder(make, highway_mpg_median)) %&gt;% top_n(10, highway_mpg_median) %&gt;% arrange(highway_mpg_median) %&gt;% mutate(lane = row_number() %% 2 * 2 + 13) %&gt;% group_by(highway_mpg_median) %&gt;% mutate(make = paste0(make, collapse = &quot;, &quot;)) 产生的数据格式是这样的 导入图中的小车 png 图片 注意： 这里先将图片保存在自己当前环境的路径下123# Icon by mynamepong, flaticon.com# here() 函数上一次介绍过就不介绍了，就是当前路径car = here::here(&quot;car.png&quot;) 绘图 大致思路： 用 geom_rect() 绘制一个大的灰色背景幕布 → geom_rect() 绘制城市公路，哈哈（就是途中的黑色）→ 再绘制公路中间的虚线（白色虚线）→ 同城市公路绘制高速公路 → 通过 geom_image() 把小车图标加上去，哈哈（）萌死我了 → 使用 geom_text() 加上车子类型注释，注意其中的参数 hjust 参数一左一右 → 使用 geom_segment 加上刻度尺，这里太机智了，我的妈欸（分了左右，而不是在一条线上）→ xlim() 函数标注 x 轴的范围 → labs() 加上标题啊、小标题啊、脚注啊等等 → 主题优化总之逻辑特别清晰，一步紧跟一步，绘图代码部分，一步一步运行就好，简单粗暴易理解，真的是学习的好案例。（ 作者脑洞真的大，也可能是我脑子太小了 ） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455ggplot() + # city background geom_rect(aes(xmin = -2, ymin = 0, xmax = 7, ymax = 105), fill = &quot;grey60&quot;) + # city street geom_rect(aes(xmin = -0.75, ymin = 0, xmax = 2.75, ymax = 105), fill = &quot;grey20&quot;) + # city street line geom_segment(aes(x = 1, y = 0, xend = 1, yend = 105), size = 2, color = &quot;grey90&quot;, linetype = 2) + # city label geom_text(aes(x = -1.6, y = 1, label = &quot;CITY&quot;), size = 8, color = &quot;grey90&quot;, alpha = 0.4, family = &quot;IBM Plex Sans Medium&quot;, angle = 90, hjust = &quot;left&quot;) + # highway background geom_rect(aes(xmin = 8, ymin = 0, xmax = 17, ymax = 105), fill = &quot;brown4&quot;) + # highway geom_rect(aes(xmin = 12.25, ymin = 0, xmax = 15.75, ymax = 105), fill = &quot;grey20&quot;) + # highway road line geom_segment(aes(x = 14, y = 0, xend = 14, yend = 105), size = 2, color = &quot;grey90&quot;, linetype = &quot;longdash&quot;) + # highway label geom_text(aes(x = 16.6, y = 1, label = &quot;HIGHWAY&quot;), size = 8, color = &quot;grey90&quot;, alpha = 0.4, family = &quot;IBM Plex Sans Medium&quot;, angle = 90, hjust = &quot;left&quot;) + # city cars geom_image(data = city_race, aes(x = lane, y = city_mpg_median, image = car), size= .05, asp = 0.6) + # city cars make geom_text(data = city_race, aes(x = 6.6, y = city_mpg_median, label = make), hjust = &quot;right&quot;, family = &quot;IBM Plex Sans Condensed&quot;, size = 6, color = &quot;white&quot;) + geom_segment(data = city_race, aes(x = 6.7, y = city_mpg_median, xend = 7, yend = city_mpg_median), color = &quot;white&quot;) + # highway cars geom_image(data = highway_race, aes(x = lane, y = highway_mpg_median, image = car), size= .05, asp = 0.6) + # highway cars make geom_text(data = highway_race, aes(x = 8.4, y = highway_mpg_median, label = make), hjust = &quot;left&quot;, family = &quot;IBM Plex Sans Condensed&quot;, size = 6, color = &quot;white&quot;, check_overlap = TRUE) + geom_segment(data = highway_race, aes(x = 8, y = highway_mpg_median, xend = 8.3, yend = highway_mpg_median), color = &quot;white&quot;) + # y axis between roads geom_text(aes(x = 7.5, y = seq(0, 100, 10)), label = seq(0, 100, 10), family = &quot;IBM Plex Mono Light&quot;, size = 6, color = &quot;black&quot;) + geom_text(aes(x = 7.5, y = seq(5, 95, 10)), label = seq(5, 95, 10), family = &quot;IBM Plex Mono Light&quot;, size = 6, color = &quot;grey50&quot;) + geom_text(aes(x = 7.5, y = -3, label = &quot;MPG/MPGe&quot;), family = &quot;IBM Plex Mono Light&quot;, size = 6, color = &quot;black&quot;) + # title and theme xlim(-2, 17) + labs( title = &quot;Tesla is the leading car brand in energy efficiency&quot;, subtitle = &quot;Top 10 most energy efficient brands in city and highway driving.\nRanking is based on calculated median MPG and MPGe of all\nmodels made by every car manufacturer since 1984.&quot;, caption = &quot;Source: EPA | Graphic: Georgios Karamanis\nCar icon by mynamepong, flaticon.com&quot; ) + theme_void(base_family = &quot;IBM Plex Sans&quot;) + theme( plot.margin = margin(20, 20, 20, 20), plot.title = element_text(family = &quot;IBM Plex Serif Bold&quot;, size = 28, margin = margin(10, 0, 0, 0)), plot.subtitle = element_text(size = 24, margin = margin(10, 0, 0, 40)), plot.caption = element_text(size = 12, color = &quot;grey60&quot;, margin = margin(0, 40, 0, 0)), ) + ggsave( here::here(paste0(&quot;big-epa-cars-&quot;, format(Sys.time(), &quot;%Y%m%d_%H%M%S&quot;), &quot;.png&quot;)), height = 19, width = 12, dpi = 320 ) # 出图到保存一步到位]]></content>
      <categories>
        <category>R 可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNA Methylation Toward Crop Disease Resistance Improvement]]></title>
    <url>%2F2019%2F10%2F13%2FDNA-Methylation-Toward-Crop-Disease-Resistance-Improvement%2F</url>
    <content type="text"><![CDATA[DNA Methylation: Toward Crop Disease Resistance ImprovementDNA 甲基化：提高作物抗病性​ 作物疾病和气候变化是对全球作物产量的主要威胁。DNA 甲基化是一种表观遗传标记，参与植物的各种生物学过程，包括发育、逆境适应和基因组进化。通过提供新的变异来源，DNA甲基化为科学家和育种家在增强抗病性带来了新的方向。在这里，我们讨论病原体诱导的DNA甲基化修饰对宿主转录组重编程和基因组稳定性的影响，作为植物防御机制的一部分。我们还强调了对DNA甲基化在植物病原体相互作用中的整个作用知识的 gap 。这将最终帮助育种家提高抗性，减少产量损失。 Highlights（亮点） 多样性是由遗传和表观遗传变异形成的。与遗传多样性不同，表观遗传变异（ 例如 DNA甲基化/去甲基化 ）强烈依赖于并受环境因素驱动。最近许多研究表明，由于病原体的感染，植物的 DNA 甲基化发生改变，从而调节防御反应和提高抗性。 通过 DNA 去甲基化，植物重对转录组进行重编程，并以一种精确和有针对性的方式管理它们的基因组稳定性，以最大限度地提高它们应对动态环境变化的能力。 环境扰动（ 如生物和非生物胁迫）导致 DNA 甲基化状态的任何变化都可能导致新的可遗传表型，并拓宽遗传和表型变异的来源，这对于自然选择和人工选择都是必需的。 植物病害与表观遗传学​ 粮食安全、气候变化和人口增长已成为全球性重大问题。估计表明，到 2050 年，世界人口将达到近 100 亿，2006 年可获得的作物卡路里与 2050 年预计的卡路里需求之间的粮食缺口为 70%。农业生产持续平均每年增长 4400 万吨，持续 40 年，是满足这一需求的关键。 ​ 最近，表观遗传变化也被证明在诱导表型多样性中起着重要作用，包括通过控制防御基因的表达水平来诱导植物的抗性反应。表观遗传学是指研究不依赖于 DNA 序列的基因功能的有丝分裂和减数分裂可遗传变化。表观遗传学改变包括 DNA 甲基化和去甲基化，染色质重塑和组蛋白修饰。DNA甲基化是真核生物中一种重要而常见的表观遗传修饰 ( 2000 年), 并参与各种生物过程，包括植物对逆境条件的适应机制 ( 2016 年综述 )等。在这篇综述中，我们强调了 DNA 甲基化在植物病原体相互作用中的重要性，并提高了对该领域当前知识 gap 的认识 植物防御机制和 DNA 甲基化​ 植物抵抗病原体的能力依赖于防御基因的调控，包括植物防御机制第一层的基因，这些基因是通过表面宿主蛋白受体识别病原体/微生物诱导子、病原体相关分子模式 ( PAMPs: pathogen-associated molecular pattern ) 或微生物相关分子模式 ( MAMPs: microbe-associated molecular pattern ) 而启动的。这些基因刺激 PAMP 触发免疫 ( PTI: PAMP-triggered immunity ) 或第二层防御机制中的相关基因，称为效应器触发免疫 ( ETI: effector-triggered immunity ) 。ETI 是一种抗性基因，其中抗病蛋白和特定病原体毒力 ( Avr ) 蛋白之间的相互作用。核苷酸结合位点-亮氨酸丰富重复 (NLR: The nucleotide-binding site–leucine rich repeat) 蛋白是最已知的对植物抗病性有重大影响的抗性蛋白。这些基因在数量和分布上的表达模式和进化是植物胁迫诱导反应的关键因素。 植物免疫系统综述 ( 2006 目前将近万引用率 ) NLR 蛋白 ​ DNA甲基化 是指在DNA的第五位胞嘧啶碱基上加一个甲基，形成 5-甲基胞嘧啶。植物中，在对称 CG 和 CHG 和不对称 CHH ( 其中 H = A，C或T ) 的背景下观察到胞嘧啶碱基的甲基化，DNA 甲基化主要包括 CG、CHG、CHH 三种类型的甲基化。在几种植物中都观察到了这种模式： 拟南芥：CG: 24%, CHG: 6.7%, CHH: 1.7% ( 2008 年 ) 木薯 cassava (Manihot esculenta) ：CG: 58.7%, CHG: 39.5%, CHH: 3.5% （ 2015 年 ） 大豆 soybean (Glycine max)：CG: 63%, CHG: 44%, CHH: 5.9% ( 2013年 ) 玉米 maize (Zea mays) ：CG: 65%, CHG: 50%, CHH: 5% ( 2013 年 ) 水稻 rice (Oryza sativa)：CG: 54.7%, CHG: 37.3%, CHH: 12% ( 2012 年 ) ​ 上述研究还表明，基因 Body 甲基化在 CG 中高度甲基化；而转座元件 ( TEs : 即一种可移动遗传元件 ) 在所有三种序列环境中都高度甲基化。 ​ 在植物中 DNA 甲基化涉及三个过程：从头 ( de novo ) DNA 甲基化、甲基化的维持、DNA 去甲基化。在植物中，从头 DNA 甲基化由 DRM2 ( Domains Rearranged Methyltranferase 哺乳动物中 DNA 甲基化转移酶 Dnmt3 的同系物 )。从头甲基化通过小RNA发生，称为 RdDM 途经 ( RNA-directed DNA methylation )，需要两种植物特异性RNA聚合酶，Pol IV 和 Pol V。包括 siRNA 和 miRNA 在内的小 RNA 的作用已被证明是一系列生物学过程，包括基因表达调控和转座子沉默。例如，miRNA 已显示参与调节番茄中 NLR的表达，从而可调节防御反应。还发现多种水稻 miRNA 通过上调防御相关基因而参与了对米曲霉 ( M. oryzae ) 的抗性增强。在拟南芥中，AGO4（ Argonaute 4 ：siRNA 介导的沉默中指导 DNA 和组蛋白甲基化的主要成分之一 ）中的突变导致对细菌性病原体丁香假单胞菌 ( Pseudomonas syringae ) 的敏感性增加。 拟南芥 RdDM 突变体，包括nrpe1 ( Pol V 的最大亚基 )，nrpd2 ( Pol V 的第二大亚基 )，ago4，drd1，rdr2 ( RNA 依赖性 RNA 聚合酶 2 ) 对病原体感染的修饰反应，证实RdDM 在植物免疫系统中起关键作用 ​ 在植物中，最丰富的一类小 RNA 来源于 TEs 和 DNA 重复序列，含有 TEs 的基因更容易通过 RdDM 途径进行调节。non-TE 相关基因的表达也可能受到 RdDM 途径的影响。在大豆中，被 24-nt 的小 RNA 靶向的 90 种 NLR 基因中的大多数被甲基化。这些结果表明，RdDM 途径可以独立于 TEs 靶向 NLR 基因，并调节 NLRs 的表达水平和随后的耐药反应。在病原体压力 下，NLR 的进一步调节机制是通过 WRKY 转录因子，其表达水平受到 RdDM途径的强烈影响。水稻中已经报道了这种调节机制的一个例子 ( 图一 )。 图1.病原体压力下植物的DNA甲基化调控 在病原体攻击过程中，通过 RdDM t途经引起的高甲基化和 ROS1（ Repressor of Silencing 1 ）介导的低甲基化可调节防御基因的表达，例如核苷酸结合位点-富含亮氨酸的重复序列（ NLR ），并调节转座子活性。转座子活性的变化也会影响防御基因的表达。ROS1 的表达也可以通过 RdDM 途径调节。 ​ 为了平衡基因组的甲基化水平并保持基因表达，植物使用 DNA 去甲基酶去除5-甲基胞嘧啶，并用未甲基化的胞嘧啶取代它。在拟南芥中有四种 DNA 去甲基酶：Demeter (DME), Repressor of Silencing 1 (ROS1), Demeter-Like 2 (DML2) 和 DML3。然而 *DML2 和 DML3 *的生物学功能并不是很清楚。已报道母系等位基因去甲基化和胚乳中的基因印迹需要 DME，ROS1 与植物发育调节以及生物和非生物胁迫响应有关。用 flg22 (flagellin-derived peptide) 处理的拟南芥 DNA 去甲基酶缺失突变体 ros1 显示 flg22 的繁殖增强，而 flg22 通过超敏反应在处理过的野生型植物中防止传播。有趣的是，据报道，低甲基化的 nrpe1 突变体和高甲基化的 ros1 突变体通过调节防御相关基因的表达来拮抗拟南芥对 Hyaloperonospora arabidopsidis 的基础抗性。此外，ROS1 的表达对 RdDM 活性有反应。减少的DNA甲基化抑制 ROS1 表达，而增强的 DNA 甲基化则促进 ROS1 表达。这种调节机制进一步表明了 ROS1 在植物防御反应中的潜在作用 ( 1 2 )。 ​ DNA 甲基化的维持取决于序列。MET1 ( Methyltransferase1 ) 维持 CG 甲基化，CMT3 ( Chromomethylase3 ) 和 CMT2 维持 CHG 甲基化，CMT2 或者 RdDM 途经维持 CHH 甲基化。缺乏 CG（ met1 突变体），CG 和 CHH（ met1 nrdp2突变体）以及CHG和CHH（ drm1 drm2 cmt3 的 ddc 三突变体）的甲基化维持能力的拟南芥突变体显示出对丁香假单胞菌的抗性增强 ( 1 2 )。ddc 突变体还显示出对引起霜霉病的病原体 H. arabidopsidis 的抵抗力增强。 ​ 可用于研究整个基因组的DNA甲基化状态的各种方法的迅速发展，使人们对DNA甲基化在植物的各种生物过程（包括植物病原体相互作用）中的作用有了深入的了解。这些包括 WGBS ( 全基因组亚硫酸氢盐测序 )、epi-restriction-site associated DNA sequencing（ epi-限制性酶切位点相关的 DNA 测序 ）、methylC-capture sequencing ( 甲基化 C 捕获测序 )、methylated DNA immunoprecipitation sequencing ( DNA 甲基化免疫沉淀测序 )、combined bisulfite restriction analysis ( 结合亚硫酸氢盐限制分析 )、SeqCap Epi、amplification of intermethylated sites。DNA 甲基化作为植物病原体诱导的免疫系统的一部分的最新研究，使用了这些不同的方法，总结如下： 表1：建议点链接查看 缩写： AFLP，扩增的片段长度多态性； COBRA，亚硫酸氢盐结合限制分析； HPLC，高效液相色谱法； LRR，富含亮氨酸的重复序列； MSAP，甲基化敏感的扩增多态性； MeDIP-seq，甲基化的 DNA 免疫沉淀测序。 ​ 显然，在植物中，DNA 甲基化在病原体压力下是高度动态变化的，并且可以显著影响防御响应。接下来将套路 DNA 甲基化对病原体相互作用的影响，包括转录组重编程和基因组稳定性的变化。这为研究植物病原体相互作用的当前遗传研究进展提供了新的方向，通过将DNA 甲基化变异纳入当前的育种计划中为作物育种铺平了新的道路 ( 图二 )。 图二：关键图。病原体诱导的 DNA 甲基化变化通过转录组重编程和基因组稳定性变化对诱导表型和遗传多样性的影响。 DNA 甲基化：转录组重编程的刺激。​ 植物适应胁迫条件的能力取决于转录组的重编程，并且 DNA 甲基化已显示在不同生长阶段和胁迫条件下在转录组修饰中起关键作用（ 1、2、3、4 ）。DNA 甲基化与基因表达之间的相关性非常复杂，并且取决于各种因素，包括组织类型，转座子活性，序列背景和基因组区域，例如基因 Body 和启动子。在以下小节中，我们讨论病原体压力如何通过改变启动子，基因 Body 和 TE 中的 DNA 甲基化状态来影响基因表达。 启动子甲基化​ 有许多研究表明，启动子区域的甲基化调节基因的表达，而基因启动子区域的甲基化与基因表达水平之间呈负相关关系（ 1、2、3、4 ）。疾病相关基因（ 例如 NLR 基因 ）启动子中的病原体诱导的 DNA 甲基化低甲基化可以改变其表达水平并诱导防御能力。例如，Xa21G 的启动子区在水稻突变体中，稻瘟病防御基因被低甲基化，而在野生型植物中被高甲基化。随后，在突变植物中观察到高水平的基因表达和对病原体的防御表型，而在野生型中未观察到 ( 1 )。与生物胁迫一样，由于非生物胁迫（ 例如盐度和干旱 ）而启动子低甲基化会导致非生物胁迫响应基因的上调 （ 1、2、3 ）。 ​ 但是，启动子的低甲基化对于提高基因表达水平并非必要的。例如，发现稻瘟病抗性基因Pib 的启动子被高度甲基化，尽管它在被 Magnaporthe grisea 感染的植物中高表达。有趣的是，Pib 启动子的部分去甲基化会降低其表达，并因此损害抗性表型（ 1 ）。 ​ 在胁迫条件下，低甲基化和高甲基化对植物都是有益的，整体的高甲基化会减少转录，从而减少细胞的能量消耗，而减少能量消耗是在病原体侵袭或非生物胁迫时所必需的。相比之下，抗性基因的低甲基化会增强其表达，从而对环境因素产生快速适应性的反应（ 1 ）。为了最大程度地利用 DNA 甲基化提高抗病性，重要的是要了解植物针对病原体采用哪种策略，低甲基化还是高甲基化。 基因 Body 甲基化​ 与启动子甲基化在基因表达中的作用相反，基因 Body 甲基化在基因表达修饰中的作用不太清楚。通常，在植物和哺乳动物中，在其转录/编码区具有高甲基化水平的基因与持续的高水平表达成正比（ 1、2、3、4 ）。全基因组分析拟南芥 DNA 甲基化显示，中等转录的基因最有可能被甲基化，而表达水平最低或最高的基因最不可能被甲基化 （ 1、2 ）。CG 背景下的基因 Body 甲基化已显示与许多植物物种（包括木薯、普通豆、大豆、水稻 ( 1 2 )、拟南芥 ( 1 2 ) ）中的基因表达呈正相关。对水稻中 MET1 基因的无效突变体（ Osmet1-2 ）的研究表明重复基因的表达不同，其中重复基因的高表达和低表达对基因 Body CG 甲基化损失的反应不同 （ 1 ）。相比之下，*CHG 和 CHH *环境中的基因 Body 甲基化与番茄、拟南芥、普通豆中的基因表达呈负相关。这些观察表明，基因 Body 甲基化的序列背景对于基因表达调节是重要的。 ​ 已经在几种植物基因组中鉴定并研究了防御基因（ 1、2、3、4、5、6 ）; 然而，他们的甲基化模式仍然知之甚少。最近的一项研究报道了常见的豆类 NLR 基因中异常的 Body 甲基化模式，其中一半的已鉴定 NLR 在所有三种情况下（ CG，CHG 和 CHH ）都被甲基化，类似于转座子的 DNA 甲基化模式，而典型的基因 Body 甲基化发生在 CG 环境中（ 1 ）。这些异常模式可能表明防御基因中 DNA 甲基化的未知调控作用。为了更好地理解这些潜在的调控作用，需要在不同的植物物种中研究防御基因的甲基化模式。 ​ 除序列背景外，有证据表明基因 Body 甲基化对基因表达的影响取决于甲基化位点（ 即内含子，外显子及其边界 ）的位置。在拟南芥中，除内含子-外显子边界外，CHH 和 CHG 甲基化基本上被排除在基因 Body 内 ( 1 )。在玉米中也观察到内含子-外显子边界处的 CHH 和CHG 甲基化，从而得出这样的假设：该甲基化模式通过抑制 RNA 剪接在替代剪接事件中具有潜在作用（ 1 ）。内含子，外显子及其边界中 DNA 甲基化的不同模式可以控制剪接事件，通过产生新的功能或功能失调的基因转录本，甚至沉默基因，导致表型多样性增加。 转座子甲基化​ TE 通过各种依赖 TE 激活的机制调节基因表达，而 TE 激活主要由其 DNA 甲基化状态控制（ 1 ）。生物或非生物胁迫下导致的全基因组低甲基化可以激活转座子并增加其在防御相关基因中的移动性，并随后调节其表达水平（ 1 、2、3、4、5、6）。 ​ TE 调节基因表达的机制包括： 插入基因区域，改变表达水平或沉默基因，但是，基因通常可以耐受； 启动子的插入/缺失和新启动子的产生； 启动子中已经存在的 TE 的 DNA 甲基化状态的变化； 基因上游或下游插入 TE 改变其表达 ​ 尽管在植物病原体的相互作用中对这四种机制的潜在过程尚不十分了解，但仍有一些实例可以证实宿主 TE 甲基化模式受病原体影响，并在调节防御机制中起重要作用（ 1 、2）。例如，拟南芥脱甲基酶三突变体 rdd（ ros1 dml2 dml3 ）显示出对病原镰孢的敏感性增加，从而其基因组结构揭示了下调的胁迫响应基因的启动子富含甲基化的 TEs （ 1 ）。 ​ 水稻防御基因启动子中 TEs 的甲基化模式已显示可控制抗性表型和产量损失（ 1 ）。诱导抗稻瘟病的广谱抗性的水稻 Pigm 基因座包含许多 NLR，其中 *PigmR 诱导持久和广谱抗性。由于其启动子中存在高度甲基化的 TE（ MITE1 和 MITE2 ），因此 PigmS 在叶中不表达，但是在花粉中由于低甲基化而表达。有人提出 RdDM 途径介导了叶片 PigmS 启动子中MITE 嵌套的沉默。在花粉中不存在 PigmS 表达的情况下，尽管存在 PigmR 诱导的抗性，但仍存在产量损失。然而，PigmS 在花粉中的表达与 PigmR 的表达可导致广谱抗性，而不会降低产量。这些结果表明，PigmS 启动子中现有 TE 的甲基化状态以组织特异性方式控制其表达，并导致高抗性表型与较少产量损失之间的平衡。TE 的甲基化模式可能是同时调控各种基因的关键因素，因此，管理 TEs 的甲基化模式可能是育种计划中提高所需农艺性状表达并减少不良农艺性状影响的一种方法。 ​ 在水稻中，两个 WRKY45 等位基因编码一个转录因子，在抗 X.oryzae pv 中具有相反的功能，强调了 DNA 甲基化在调节基因功能中的重要性。两个等位基因之间的差异是 WRKY45-2 等位基因中存在两个 MITE，而 WRKY45-1 等位基因中不存在两个 MITE。这些 MITE 参与小RNA（ TE-siR815 ）的产生，TE-siR815 通过通过 RdDM 途径增强 ST1 内含子的 DNA 甲基化水平来抑制 NLR 基因 ST1 的表达，从而解释了 WRKY45-1 的负作用及其在调节抗病性中的作用（ 1 ）。 ​ 通过 TE 激活进行转录组重编程不仅限于生物胁迫。例如，在来自十字花科 ONSEN 的几种物种中，拟南芥属中的 LTR-copia 型反转录转座子被热应激激活并优先插入基因区附近。这意味着它参与了转录组和基因网络的调控，因此提高了植物适应逆境的能力（ 1、2 ）。与野生型相比，ONSEN 转录本还显示在热处理的拟南芥 nrpd1 突变体中显着增加，该突变体在 RNA 聚合酶 IV和 siRNA **途径中受损。在应激的 *nrdp1* 突变体的子代中也观察到了新的*ONSEN* 插入的高频率，但在应激的野生型中却没有。这些观察结果表明，尽管环境压力触发了反转录转座子的活性，但 **siRNA 途径在限制其运动中起着至关重要的作用（ 1 ）。 DNA 甲基化：基因组稳定性的力量​ 基因组稳定性取决于 TEs 的激活和基因组重排的自由性。活跃的移动元件和高频率的基因组重排导致基因组不稳定（ 1 ）。DNA 甲基化对基因组稳定性的影响不如转录组重编程中的作用那么快，并且在经过多年中响应各种环境刺激而对 DNA 甲基化模式进行的修饰会影响基因组进化过程。据推测，DNA 甲基化可作为对环境因素的快速适应性反应。例如，遗传（ SNP ）和甲基化（ 单甲基化多态性 ）变异被用于将来自广泛地理区域的小麦种质聚类，表明甲基化聚类到本地群体的聚类，而遗传变异聚类包括跨更广域的种质（ 1 ）。这突出了环境因素对基因组 DNA 甲基化模式的影响，并因此突出了基因组对进化过程的脆弱性。 … TE 甲基化… 基因组重排… 突变… 结束语和未来方向​ DNA 甲基化是植物适应的机制，是一个相对较新的变异来源。植物利用 DNA 甲基化来指导长期的生物过程（ 例如，基因组进化 ）和短期的过程（ 例如，对胁迫做出反应 ）。响应环境因素全基因组低甲基化和高甲基化，改变基因组稳定性并诱导进化过程，如突变和阶段性重排，从而导致稳定的遗传和表型多样性的产生。 ​ 在突如其来的应激下，DNA 甲基化的修饰通过调节应激反应基因的表达水平，作为一种快速的适应性反应。基因、TEs 和基因 Body 的上游和下游周围的低甲基化和高甲基化主要影响转录过程。总而言之，植物利用 DNA 甲基化修饰来针对动态环境扩展其表型和遗传多样性，以在需要时最大化能量消耗效率和抗性响应。 ​ 从育种者的角度来看，植物疾病管理和抗病性改善一直是育种计划的重中之重。但是，气候变化和人口增长带来了更多挑战。由于气候变化，胁迫和疾病流行的严重性和频率增加，这意味着单产损失预计将大大增加（ 1 ）。加之人口增长率和未来粮食需求的增长趋势，这给育种者施加了更大的压力，要求将产量损失降至最低。育种人员需要超越目前主要依靠遗传变异的育种策略，以最大程度地减少由于植物病害引起的产量损失。 通过扩大表型变异，DNA 甲基化可以解决育种方案中的现有局限性。 ​ 我们认为，DNA 甲基化在植物病原体相互作用中的作用值得进一步研究，以填补关键的知识空白，并使之在育种计划中提高抗性。 *悬而未决的问题 * 在不同的植物物种中，与防御相关的特定基因家族（ 例如 NLR ）的 DNA 甲基化模式是否相似？防御相关基因的 DNA 甲基化模式是否更容易在病原体攻击下发生变化？ 与防御相关的基因的哪些部分（ 例如启动子，基因体，外显子，特定结构域等 ）在病原体攻击下更容易发生变化？这些漏洞在不同植物之间是否相似？ 尽管 DNA 甲基化证明自己是新的变异来源，但如何将其纳入育种过程并在其中使用呢？ 在表观遗传学成功地应用于植物育种的情况下，作为消费者的人/社会对表观改良作物的反应如何？ ARGONAUTE4 Control of Locus-Specific siRNA Accumulation and DNA and Histone Methylation ( 2004 年 Daniel Zilberman, Xiaofeng Cao, Steven E. Jacobsen Science) Gardening the genome: DNA methylation in Arabidopsis thaliana ( 2005 年综述 Steven E. Jacobsen 注意看网页版：model 图后面又勘误校正) Epigenetic inheritance in plants ( 2007年 Steven E.Jacobsen 综述 ) Establishing, maintaining and modifying DNA methylation patterns in plants and animals ( 2010 年 Steven E.Jacobsen 综述 ) DNA Methylation-Associated Epigenetic Changes in Stress Tolerance of Plants [ 2013 年 BOOK] DNA methylation as a system of plant genomic immunity ( 2014 年 Daniel Zilberman 综述) DNA methylation dynamics in plants and mammals: overview of regulation and dysregulation ( 2016 年综述 ) Transposon-derived small RNA is responsible for modified function of WRKY45 locus ( 2016 年 王石平老师 ) DNA-Demethylase Regulated Genes Show Methylation-Independent Spatiotemporal Expression Patterns ( 2017 年 ROS1 等去甲基化酶和时空表达 ) Transposable element influences on gene expression in plants ( 2017 年 Nathan M.Springer 综述 )]]></content>
      <categories>
        <category>文献</category>
      </categories>
      <tags>
        <tag>DNA 甲基化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TidyTuesday_week38_heatmap]]></title>
    <url>%2F2019%2F09%2F21%2FTidyTuesday-week38-heatmap%2F</url>
    <content type="text"><![CDATA[参考链接https://github.com/gkaramanis/tidytuesday/tree/master/week-38 ####################################################################### 学习到的技能（需要掌握的函数）####################################################################### filter() + mutate() + group_by() + arrange() + drop_na() mutate() 函数中的 case_when 来条件判断赋值，可以使用代码冗余复杂变得浅显易懂，也很方便进行修改 lag() 函数表示取向量中的前一个数据 lead() 函数表示取向量中的后一个数据 最后记得先排序后操作，或者在函数中指定 order_by = xx geom_segment() 函数 expand 函数表示范围扩展常数矢量，用于在数据周围添加一些填充，以确保将其放置在距轴一定距离的位置。使用便捷函数 expand_scale() 函数来生成 expand 参数的值。默认值是将 连续变量 的比例尺各扩大 5％，将 离散变量 的比例尺各扩大 0.6 个单位。(翻译官方说明) expand_scale(mult = 0, add = 0) 一句话 add 表示图形距离画布左右两边的距离, mult 表示图形里画布上下两边的距离 rescale() 函数将数据范围归一化到 [0, 1] display.brewer.all() 就可以看到对应取色方案 也可以在网站 Colormaps 进行查看 labs() 要善于利用此函数来加标题等注释 theme_void() 去除所有内置主题 here 包, 可以快速创建文件夹以及文件 ####################################################################### 正文####################################################################### 数据清洗导入数据1234567891011121314151617181920212223242526rm(list = ls())library(tidyverse)library(here)library(lemon)library(RColorBrewer)library(scales)park_visits &lt;- readr::read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-17/national_parks.csv&quot;)# 可以看到每一列的数据类型是什么样的。# 我们可以清楚看到 `year` 那一列是属于字符串类型，后面进行操作时候变为了 `numeric`# cols(# year = col_character(),# gnis_id = col_character(),# geometry = col_character(),# metadata = col_character(),# number_of_records = col_double(),# parkname = col_character(),# region = col_character(),# state = col_character(),# unit_code = col_character(),# unit_name = col_character(),# unit_type = col_character(),# visitors = col_double()# ) 整理数据 这里充分结合来了 filter() + mutate() + group_by() + arrange() + drop_na() 函数一套清洗 还有一点需要强调的是要善于利用 mutate() 函数中的 case_when 来条件判断赋值，可以使用代码冗余复杂变得浅显易懂，也很方便进行修改 这里还需要注意的是利用了 lag() 函数，起到提取向量中的前一个值，后面会解释。12345678910111213141516pv_ch &lt;- park_visits %&gt;% distinct(year, unit_name, unit_type, visitors) %&gt;% # 去除重复行，类似base::uniq() 函数, 返回去除重复后的数据 filter(unit_type == &quot;National Park&quot; &amp; year != &quot;Total&quot;) %&gt;% # 筛选数据类型为 `National Park` 和年份为 `非 Total` 的行 mutate(year = as.numeric(year)) %&gt;% # 将 `year` 列由 `character` 变为 `numercic` group_by(unit_name) %&gt;% # 按照 `unit_name` 列变量进行分组 arrange(year, .by_group = TRUE) %&gt;% # 将 `year` 年份按照分组分别进行排序 mutate(pct_change = (visitors/lag(visitors) - 1) * 100) %&gt;% # 新建一列 `pct_change` lag() 向量中的 `前一个` 值 filter(unit_name != &quot;Denali National Preserve&quot;) %&gt;% # 将 `Denali National Preserve` 行去除 drop_na() %&gt;% # 去除空值 `NA` mutate( # 按照 `pct_change` 列的大小分组，三组 pct_change = case_when( pct_change &gt; 100 ~ 200, pct_change &lt; -100 ~ -200, TRUE ~ pct_change # 表示除了上面的范围之内的范围都属于这个范畴 ) ) 不得不插一句说明 lag() 和 lead() 函数 官方说明书：https://dplyr.tidyverse.org/reference/lead-lag.html lag() 函数表示取向量中的前一个数据 lead() 函数表示取向量中的后一个数据 最后记得先排序后操作，或者在函数中指定 order_by = xx 1234567891011lag(1:10, 1)# [1] NA 1 2 3 4 5 6 7 8 9lag(1:10, 2)# [1] NA NA 1 2 3 4 5 6 7 8lead(1:10, 1)#&gt; [1] 2 3 4 5 6 7 8 9 10 NAlead(1:10, 2)#&gt; [1] 3 4 5 6 7 8 9 10 NA NA 可视化这部分思想很重要， geom_segment() 函数用来绘制区域，即指定四个点的位置, 详情见 ggplot2 都有哪些使用不多但是却异常强大的图层函数 一文，反正我看完是受益匪浅。expand: 范围扩展常数矢量，用于在数据周围添加一些填充，以确保将其放置在距轴一定距离的位置。使用便捷函数 借用这里 How does ggplot scale_continuous expand argument work? 的一个解释: 123456789ggplot(mpg, aes(displ, hwy)) + geom_point() + scale_x_continuous(limits = c(1, 7), expand = c(0.5, 0))# right most position will be 7 + (7-1) * 0.5 = 10ggplot(mpg, aes(displ, hwy)) + geom_point() + scale_x_continuous(limits = c(1, 7), expand = c(0.5, 2))# right most position will be 7 + (7-1) * 0.5 + 2 = 12 expand_scale() 来生成 expand 参数的值。默认值是将 连续变量 的比例尺各扩大 5％，将 离散变量 的比例尺各扩大 0.6 个单位。(翻译官方说明) expand_scale(mult = 0, add = 0) mult: 范围扩展因子的向量。如果向量长度为 1，则刻度的下限和上限均会向外扩大。如果向量长度为 2，则下限由 mult[1] 扩展，上限由 mult[2] 扩展。add = c(0,1) 表示下边距离 x 轴零距离，距离顶端 1 倍长度。一般用于 y 轴，即 scale_y_* add: 可加范围扩展常数的向量。如果向量长度为 1，则通过添加单位向外扩展刻度的上下限。如果向量长度为 2，则下限由 add[1] 扩展，上限由 add[2] 扩展。 add = c(0,1) 表示距离 y 轴零距离，距离右边 1 个单位。一般用于 x 轴，即 scale_x_* 一句话 add 表示图形距离画布左右两边的距离, mult 表示图形里画布上下两边的距离 rescale() 将数据范围归一化到 [0, 1]12345rescale(1:10)# [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667 0.7777778 0.8888889 1.0000000rescale(1:11)# [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 图中对应的颜色条 display.brewer.all() 就可以看到对应取色方案 也可以在网站 Colormaps 进行查看 labs() 要善于利用此函数来加标题等注释 theme_void() 去除所有内置主题，具体一眼见 ggplot2 的主题模板 还得提一下的是 here 包, 可以快速创建文件夹以及文件 说明书 1234567here()# [1] &quot;F:/temp_desktop/2019-5&quot;here(&quot;one&quot;, &quot;two&quot;, &quot;awesome.txt&quot;)# [1] &quot;F:/temp_desktop/2019-5/one/two/awesome.txt&quot;# cat(readLines(here(&quot;one&quot;, &quot;two&quot;, &quot;awesome.txt&quot;)))# 这里需要管理员权限运行才行，由于我这里没有管理员运行，所以后面那部分保存图片是运行不了的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748pv_ch %&gt;% ggplot() + geom_segment(aes(x = year, xend = year, y = 0, yend = 1, color = pct_change), size = 1) + # 绘制几何图形并填充颜色 scale_x_continuous(breaks = seq(1910, 2010, 20), # 指定 x 轴标签内容 expand = expand_scale(add = c(5, 1))) + # 表示指定离左边的距离为 5, 离右边为 1，当为 c(0, 0) 时候会填充整个坐标轴画布 scale_y_continuous(expand = c(0.05, 0.25)) + # 表示将 y 轴变为 ymax + (ymax - ymin) * 0.05 + 0.25 facet_wrap(vars(unit_name), ncol = 3) + # 表示按照 `unit_name` 进行分面，变为三列。 # `scale_colour_gradientn` N种颜色之间的平滑颜色渐变 scale_colour_gradientn(limits = c(-200, 200), # 指定颜色填充的范围 colors = brewer.pal(n = 7, name = &quot;RdYlGn&quot;), # 选取颜色，对应颜色注释见 `display.brewer.all()` values = rescale(c(-200, -100, -1, 0, 1, 100, 200)), # 对七个刻度进行归一化？，反正就是变成 [0, 1] labels = c(&quot;&quot;, &quot;-100%&quot;, &quot;0&quot;, &quot;100%&quot;, &quot;&quot;) # 对应的刻度尺进行标签注释 ) + labs( # 标签注释，懒得解释 title = &quot;National Park Visits 1904–2016&quot;, subtitle = &quot;Year-over-year percentage change&quot;, caption = &quot;Source: dataisplural/data.world | Graphic: Georgios Karamanis&quot; ) + guides(color = guide_colorbar( title.position = &quot;top&quot;, label.position = &quot;top&quot;, title = NULL, barwidth = 20, barheight = 0.5 )) + theme_void(base_family = &quot;Times New Roman&quot;) + theme( legend.position = &quot;top&quot;, legend.title = element_text(size = 20, color = &quot;grey20&quot;), legend.margin = margin(0, 0, 20, 0), plot.background = element_rect(fill = &quot;grey80&quot;, color = NA), strip.background = element_rect(fill = &quot;grey80&quot;, color = NA), strip.text = element_text(family = &quot;Times New Roman&quot;, color = &quot;grey30&quot;, hjust = 1, vjust = 1), plot.title = element_text(size = 28, color = &quot;grey20&quot;, family = &quot;Times New Roman&quot;), plot.subtitle = element_text(size = 20, color = &quot;grey20&quot;), plot.caption = element_text(size = 8, color = &quot;grey30&quot;, margin = margin(20, 0, 0, 0)), axis.text.x = element_text(family = &quot;Times New Roman&quot;, size = 7, color = &quot;grey40&quot;), panel.grid.major.x = element_line(color = &quot;grey75&quot;), plot.margin = margin(20, 20, 20, 20) ) #本来有 + # save image# ggsave(# here::hcere(&quot;week-38&quot;, &quot;figures&quot;, &quot;temp&quot;, paste0(&quot;national-parks&quot;, format(Sys.time(), &quot;%Y%m%d_%H%M%S&quot;), # &quot;.png&quot;)),# width = 18, height = 14, dpi = 320# ) # 没有管理员运行 R ，所以我的不行，需要自行设置 最后这个学了以后可以用来做什么呢？那就看大家自己的想法了。]]></content>
      <categories>
        <category>R 可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从一个图的实战来升华 R 语言 ggplot2 可视化技能.md]]></title>
    <url>%2F2019%2F08%2F18%2F%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%9B%BE%E7%9A%84%E5%AE%9E%E6%88%98%E6%9D%A5%E5%8D%87%E5%8D%8E-R-%E8%AF%AD%E8%A8%80-ggplot2-%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%80%E8%83%BD-md%2F</url>
    <content type="text"><![CDATA[首先我是这是我日常逛 twitter 看到的，然后我又是一个搬运工， 放最前面的 链接来源 ： twitter 链接： https://twitter.com/FournierJohanie/status/1161454327296339968 代码链接： ‘bullet graph’ ou graphique à puce 涉及的函数 readr::read_csv dplyr::glimpse：适合用来查看函数的类信息，没接触过 mutate() + filter() + select()：简洁方便创建新的数据 geom_bar()：柱状图 geom_segment：自由化画直线条，想画哪里画哪里，这里用来填充图中的蓝色柱子 geom_errorbar()：添加误差线，指定 y 值头到尾即可，这里用来绘制柱子上面的那一条横线 geom_point()：点图，这里用来添加柱子上面的点 coord_flip()：将 xy 轴互换 scale_y_continuous(breaks = seq(0, 80, 10), limits = c(0, 80))：定义 y 轴刻度尺内容（ 即图中展示的 x 轴数字） expand_limits()：单向扩展阈值，也可以用来指定 xy 轴的范围，这里给后面要添加箭头留白（最上面的那部分空白就是这个函数引起的） theme()：画板控制，各种参数，具体见正文或者谷歌搜索关键字 ggplot2 theme labs()：可以用来修改坐标轴以及标题、副标题等文本信息，这里通过 &quot; &quot; 将内容设置为空 geom_curve：作用与 geom_segment() 相似，只是前者用来画直线，而这里用来绘制曲线，参数 arrow 为箭头 annotate()：可以自由在画板上面添加文本注释信息，想在哪里添加就在哪里添加 成品图 好了接下来就是我复制粘贴的时间了。 一、读取数据 作者这里为了方便我们大家重现或者说学习此代码（我猜的哈），就把数据放在 github 上面。 使用 readr 包的 read_csv() 函数读取文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758emperors &lt;- readr::read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-13/emperors.csv&quot;)# 运行后会出现的结果，我们可以很清楚的看到每一列的信息Parsed with column specification:cols( index = col_double(), name = col_character(), name_full = col_character(), birth = col_date(format = &quot;&quot;), death = col_date(format = &quot;&quot;), birth_cty = col_character(), birth_prv = col_character(), rise = col_character(), reign_start = col_date(format = &quot;&quot;), reign_end = col_date(format = &quot;&quot;), cause = col_character(), killer = col_character(), dynasty = col_character(), era = col_character(), notes = col_character(), verif_who = col_character())dplyr::glimpse(emperors, width = 100)# 说实话，刚开始看到这个我是不知道在做啥的，然后谷歌，发现这是让我们更直观的去了解我们自己的数据# width 参数控制输出总字符的宽度# 可以很清楚的看到有 16 列（变量） 和 68 行Observations: 68Variables: 16$ index &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ...$ name &lt;chr&gt; &quot;Augustus&quot;, &quot;Tiberius&quot;, &quot;Caligula&quot;, &quot;Claudius&quot;, &quot;Nero&quot;, &quot;Galba&quot;, &quot;Otho&quot;, &quot;V...$ name_full &lt;chr&gt; &quot;IMPERATOR CAESAR DIVI FILIVS AVGVSTVS&quot;, &quot;TIBERIVS CAESAR DIVI AVGVSTI FILI...$ birth &lt;date&gt; 0062-09-23, 0041-11-16, 0012-08-31, 0009-08-01, 0037-12-15, 0002-12-24, 00...$ death &lt;date&gt; 0014-08-19, 0037-03-16, 0041-01-24, 0054-10-13, 0068-06-09, 0069-01-15, 00...$ birth_cty &lt;chr&gt; &quot;Rome&quot;, &quot;Rome&quot;, &quot;Antitum&quot;, &quot;Lugdunum&quot;, &quot;Antitum&quot;, &quot;Terracina&quot;, &quot;Terentinum&quot;...$ birth_prv &lt;chr&gt; &quot;Italia&quot;, &quot;Italia&quot;, &quot;Italia&quot;, &quot;Gallia Lugdunensis&quot;, &quot;Italia&quot;, &quot;Italia&quot;, &quot;It...$ rise &lt;chr&gt; &quot;Birthright&quot;, &quot;Birthright&quot;, &quot;Birthright&quot;, &quot;Birthright&quot;, &quot;Birthright&quot;, &quot;Seiz...$ reign_start &lt;date&gt; 0026-01-16, 0014-09-18, 0037-03-18, 0041-01-25, 0054-10-13, 0068-06-08, 00...$ reign_end &lt;date&gt; 0014-08-19, 0037-03-16, 0041-01-24, 0054-10-13, 0068-06-09, 0069-01-15, 00...$ cause &lt;chr&gt; &quot;Assassination&quot;, &quot;Assassination&quot;, &quot;Assassination&quot;, &quot;Assassination&quot;, &quot;Suicid...$ killer &lt;chr&gt; &quot;Wife&quot;, &quot;Other Emperor&quot;, &quot;Senate&quot;, &quot;Wife&quot;, &quot;Senate&quot;, &quot;Other Emperor&quot;, &quot;Othe...$ dynasty &lt;chr&gt; &quot;Julio-Claudian&quot;, &quot;Julio-Claudian&quot;, &quot;Julio-Claudian&quot;, &quot;Julio-Claudian&quot;, &quot;Ju...$ era &lt;chr&gt; &quot;Principate&quot;, &quot;Principate&quot;, &quot;Principate&quot;, &quot;Principate&quot;, &quot;Principate&quot;, &quot;Prin...$ notes &lt;chr&gt; &quot;birth, reign.start are BCE. Assign negative for correct ISO 8601 dates. Ca...$ verif_who &lt;chr&gt; &quot;Reddit user zonination&quot;, &quot;Reddit user zonination&quot;, &quot;Reddit user zonination...# 再看看 head 函数， 可以看到横列是反的head(emperors)# A tibble: 6 x 16 index name name_full birth death birth_cty birth_prv rise reign_start reign_end cause killer dynasty &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 1 Augu~ IMPERATO~ 0062-09-23 0014-08-19 Rome Italia Birt~ 0026-01-16 0014-08-19 Assa~ Wife Julio-~2 2 Tibe~ TIBERIVS~ 0041-11-16 0037-03-16 Rome Italia Birt~ 0014-09-18 0037-03-16 Assa~ Other~ Julio-~3 3 Cali~ GAIVS IV~ 0012-08-31 0041-01-24 Antitum Italia Birt~ 0037-03-18 0041-01-24 Assa~ Senate Julio-~4 4 Clau~ TIBERIVS~ 0009-08-01 0054-10-13 Lugdunum Gallia L~ Birt~ 0041-01-25 0054-10-13 Assa~ Wife Julio-~5 5 Nero NERO CLA~ 0037-12-15 0068-06-09 Antitum Italia Birt~ 0054-10-13 0068-06-09 Suic~ Senate Julio-~6 6 Galba SERVIVS ~ 0002-12-24 0069-01-15 Terracina Italia Seiz~ 0068-06-08 0069-01-15 Assa~ Other~ Flavian# ... with 3 more variables: era &lt;chr&gt;, notes &lt;chr&gt;, verif_who &lt;chr&gt; 二、加载后续所要用的包1234library(dplyr) library(tidyverse)library(lubridate) # year() 函数要用library(ggplot2) 三、数据处理 插句题外话，这里的 = 对齐，可以用 remedy 实现，操作很骚，对于 代码整洁和 Markdown 特别方便 不断的利用 mutate() 函数创建新得变量，这里没啥解释的。 filter(): 各种条件筛选 select()：选择要输出的列 1234567891011121314151617181920212223242526272829303132333435data &lt;- emperors %&gt;% mutate(annee_naiss = year(birth)) %&gt;% mutate(annee_mort = year(death)) %&gt;% mutate(annee_deb = year(reign_start)) %&gt;% mutate(annee_fin = year(reign_end)) %&gt;% mutate(age_mort = abs(annee_mort - annee_naiss)) %&gt;% mutate(age_deb = abs(annee_deb - annee_naiss)) %&gt;% mutate(age_fin = abs(annee_fin - annee_naiss)) %&gt;% mutate(duree = abs(age_fin - age_deb)) %&gt;% mutate(remove = ifelse(age_deb == age_mort, &apos;retirer&apos;, NA)) %&gt;% filter(!age_mort %in% NA, !age_deb %in% NA, !age_fin %in% NA, !age_mort %in% 4, !remove %in% &quot;retirer&quot;) %&gt;% select(name, age_deb, age_fin, age_mort, duree)# 简单查看一下数据dplyr::glimpse(data, width = 100)Observations: 51Variables: 5$ name &lt;chr&gt; &quot;Augustus&quot;, &quot;Caligula&quot;, &quot;Claudius&quot;, &quot;Nero&quot;, &quot;Galba&quot;, &quot;Vespasian&quot;, &quot;Titus&quot;, &quot;Do...$ age_deb &lt;dbl&gt; 36, 25, 32, 17, 66, 60, 40, 30, 66, 45, 41, 52, 40, 31, 16, 48, 10, 20, 52, 15...$ age_fin &lt;dbl&gt; 48, 29, 45, 31, 67, 70, 42, 45, 68, 64, 62, 75, 59, 39, 31, 66, 29, 22, 53, 19...$ age_mort &lt;dbl&gt; 48, 29, 45, 31, 67, 70, 42, 45, 68, 64, 62, 75, 59, 39, 31, 66, 29, 22, 53, 19...$ duree &lt;dbl&gt; 12, 4, 13, 14, 1, 10, 2, 15, 2, 19, 21, 23, 19, 8, 15, 18, 19, 2, 1, 4, 13, 3,..# 还是比较喜欢 head 来展示head(data)# A tibble: 6 x 5 name age_deb age_fin age_mort duree &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;1 Augustus 36 48 48 122 Caligula 25 29 29 43 Claudius 32 45 45 134 Nero 17 31 31 145 Galba 66 67 67 16 Vespasian 60 70 70 10 四、画图（重头戏） 为了说明可视化不断修整过程，我将分开展示 1、 geom_bar() 函数绘制 柱状图 1、 就是一个简单的柱状图 参数说明： stat = identity : 绘图函数 stat 的参数，用来对样本进行统计，默认为 identity，表示一个 x 对应一个 y，即横坐标 x 在数据中对应的 y 值；同时可以是 bin 表示对一个 x 对应落在 x 里面的数，即统计频数，官方说明书 geom_bar.html stat 函数有 stat_bin() 、 stat_count() 、stat_density()、stat_bin_2d()、stat_bind_hex()、stat_density_2d()、stat_ellipse()、stat_contour()、stat_summary_hex()、stat_summary_2d()、stat_boxplot()、stat_ydensity()、stat_ecdf()、 stat_quantile()、stat_smooth()、 stat_qq()、stat_summary(fun.data = &quot;mean_cl_boot&quot;)、stat_summary_bin(fun.y = &quot;mean&quot;, geom = &quot;bar&quot;)、stat_unique() 等，最重要的是还可以自定函数 stat_function(aes(x = -3:3), n = 99, fun = dnorm, args = list(sd=0.5))，详情见 ggplot2 cheat sheet，有时间要好好看下每一个对应的功能。 position = stack: 用 Cheat sheet 里面内容展示，一目了然。stack 表示堆积，dodge 表示分开，fill 表示百分比填充，jitter 表示散点图抖动，nudge 表示注释信息远离点。 1234gg &lt;- ggplot(data, aes(x = reorder(name, -age_mort), y = age_mort)) gg &lt;- gg + geom_bar(stat = &quot;identity&quot;, position = &quot;stack&quot;, width = 0.65, fill = &quot;#6D7C83&quot;, alpha = 0.4) 2、geom_segment() 函数来画直线 2、 通过 geom_segment() 函数来画直线, 因为这里是表示柱子，可以理解为线条，主要要指定 x 对应的那一根柱子，然后再指定纵向即 Y 轴的起始 age_deb 和 终止 age_fin 坐标即可，size = 2.3 制定柱子的宽度，不宜太大，然后涂上颜色。 至于这个函数式做什么的呢？就是你提供一个四边形的区间，你就可以画出一个四边形，详情可以参考 杜雨老师写的一篇超级棒的素材 ggplot2 都有哪些使用不多但是却异常强大的图层函数引用其中一句话 geom_segment 通常用于制作直线段图，路径图、放射线图等，思路也很简单，只需要指定每一条线段的起点坐标、终点坐标即可。即分别制定 x,y,xend,yend 后面会涉及一个函数 geom_curve() 用来画弧线，用官方 geom_segment 一张图说明 1234gg &lt;- gg + geom_segment(aes(y = age_deb, x = name, yend = age_fin, xend = name), color = &quot;#175676&quot;, size = 2.3, alpha = 0.8) # size = 2.3 制定柱子的宽度，不宜太大 3、geom_errorbar() 加上误差线 3、 geom_errorbar() 加上误差线，这里起始并不是真正的加上误差线，给我感觉就是在每个柱子最上放划一道横线。用上面的函数 geom_segment() 也可以做到。1234gg &lt;- gg + geom_errorbar(aes(y = age_mort, x = name, ymin = age_mort, ymax = age_mort), color = &quot;black&quot;, width = 0.85) 4、 geom_point() 函数加上散点图 4、 通过 geom_point() 函数加上散点图（ 仔细看柱子顶端中间多了一个点 ），并且通过 coord_flip() 函数将 X 和 Y 轴进行交换123gg &lt;- gg + geom_point(aes(name, age_mort), colour = &quot;black&quot;, size = 1) # 我将原文 0.75 改成了 1 ，这样点的效果好点gg &lt;- gg + coord_flip() 0) 5、 scale_y_continuous() 函数调整 y 坐标轴刻度尺的内容和范围 5、 scale_y_continuous() 函数调整 y 坐标轴刻度尺的内容和范围，注意因为我们是通过函数 coord_flip() 将 xy 轴交换了，但是修改参数的时候，仍然要对应之前的坐标轴。 scale_y_continuous() 函数，指定 y 轴刻度尺标签，breaks 展示需要的内容，limits 指定 y 轴的范围。12345gg &lt;- gg + scale_y_continuous(breaks = seq(0, 80, 10), limits = c(0, 80)) seq(0, 80, 10)[1] 0 10 20 30 40 50 60 70 80 6、expand_limits() 函数可以用来单向扩展阈值 6、 expand_limits() 函数可以用来单向扩展阈值，也可以用来指定 xy 轴的范围，这里给后面要添加箭头留白。1gg &lt;- gg + expand_limits(x = c(0, 56)) # 没咋理解这一步加不加有啥区别，先操作，再回来解释 7、 theme() 函数来调整主题 7、 通过 theme() 函数来调整主题，决定哪些显示哪些不显示 theme 官方参数详解 ggplot2主题设置 theme() 函数参数详解，来源：ggplot2 学习笔记系列之主题（theme）设置 这个应该是中文相对详细的： ggplot2 作图详解 7（完）：主题（theme）设置 搜关键词 ggplot2 theme ， 一堆供你参考 记住几个主要的吧 123456789101112131415161718192021222324252627282930313233343536373839参数 设置内容 继承自line 所有线属性 rect 所有矩形区域属性 text 所有文本相关属性 title 所有标题属性 axis.title 坐标轴标题 axis.title.x x 轴属性 axis.titleaxis.title.y y 轴属性 axis.titleaxis.text 坐标轴刻度标签属性 axis.ticks 坐标轴刻度线 axis.ticks.length 刻度线长度 axis.ticks.margin 刻度线和刻度标签之间的间距 axis.line 坐标轴线 legend.background 图例背景 legend.margin 图例边界 legend.key 图例符号 legend.key.size 图例符号大小 legend.key.height 图例符号高度 legend.key.width 图例符号宽度 legend.text 图例文字标签 legend.text.align 图例文字标签对齐方式 0 为左齐，1 为右齐legend.title 图例标题 textlegend.title.align 图例标题对齐方式 legend.position 图例位置 left, right, bottom, top, 两数字向量legend.direction 图例排列方向 &quot;horizontal&quot; or &quot;vertical&quot;legend.justification 居中方式 center 或两数字向量legend.box 多图例的排列方式 &quot;horizontal&quot; or &quot;vertical&quot;legend.box.just 多图例居中方式 panel.background 绘图区背景 panel.border 绘图区边框 panel.margin 分面绘图区之间的边距 panel.grid 绘图区网格线 panel.grid.major 主网格线 panel.grid.minor 次网格线 plot.background 整个图形的背景 plot.title 图形标题 plot.margin 图形边距 top, right, bottom, leftstrip.background 分面标签背景strip.text 分面标签文本 12345678910gg &lt;- gg + theme(panel.border = element_blank(), # 绘图区边框 panel.background = element_blank(), # 绘图区背景，这里会变成纯白，没有灰色背景 plot.background = element_blank(), # 整个图形的背景 panel.grid.major.x = element_line(size = 0.2,linetype = &quot;dotted&quot;, color = &quot;#6D7C83&quot;), # 垂直 x 轴的主网格线的类型、粗细、以及颜色 panel.grid.major.y = element_blank(), # 同上，只不过这里选择为空，不显示这条线，其实有点多余，本身就没有这里 panel.grid.minor = element_blank(), # 次网格线 axis.line.x = element_blank(), # 坐标轴线 x axis.line.y = element_blank(), # 坐标轴线 y axis.ticks.y = element_blank(), # 坐标轴 y 刻度线 axis.ticks.x = element_blank()) # 坐标轴 x 刻度线 8、 labs() 函数来修改所有标签内容 8、 通过 labs() 函数来修改所有标签内容1234gg &lt;- gg + labs(title = &quot; &quot;, subtitle = &quot;&quot;, y = &quot; &quot;, x = &quot; &quot;) 9、 theme() 函数来修改所有坐标轴刻度尺内容 9、 通过 theme() 函数来修改所有坐标轴刻度尺内容，可以看到 xy 轴刻度尺的字体和颜色都改变了。12345678gg &lt;- gg + theme(plot.title = element_blank(), plot.subtitle = element_blank(), axis.title.y = element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(hjust = 1, vjust = 0.5, size = 12, color = &quot;#6D7C83&quot;, face = &quot;bold&quot;), axis.text.x = element_text(hjust = 0.5, vjust = 0, size = 12, color = &quot;#6D7C83&quot;, face = &quot;bold&quot;) 10、geom_curve() 函数用来画弧线，来实现图中的箭头标志 10、 通过 geom_curve() 函数用来画弧线，来实现图中的箭头标志，这里我们可以看出来前面的函数 expand_limits() 是为了给这里的箭头留白。12345678910111213141516# 制备箭头的坐标arrows &lt;- tibble( x1 = c(50, 16, 53.5, 53.5, 53.5), x2 = c(49, 15, 51, 51, 51), y1 = c(35, 70, 5, 25, 40), y2 = c(22, 61, 0, 13, 19) ) # 添加箭头gg &lt;- gg + geom_curve(data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2), arrow = arrow(length = unit(0.1, &quot;inch&quot;)), size = 0.3, color = &quot;#6D7C83&quot;, curvature = -0.3) 11、annotate() 函数在图上加一点文本注释 11、 使用 annotate() 函数在图上加一点文本注释，从这里可以发现作者全文的颜色都是统一的。123gg &lt;- gg + annotate(geom = &quot;text&quot;, x = 50, y = 35, label = &quot;Le plus jeune à\ndevenir Empereur&quot;, color = &quot;#6D7C83&quot;, size=3, hjust = 0, vjust = 0.5, fontface = &quot;bold&quot;) 12、annotate() 函数在图上其它几处加一点文本注释 12、 使用 annotate() 函数在图上其它几处加文本注释12345678910111213gg &lt;- gg + annotate(geom = &quot;text&quot;, x = 18, y = 70, label = &quot;Son reigne\na pris fin\navant\nson décès&quot;, color = &quot;#6D7C83&quot;, size = 3, hjust = 0.5, vjust = 0.5, fontface = &quot;bold&quot;) gg &lt;- gg + annotate(geom = &quot;text&quot;, x = 54,y = 5, label = &quot;Naissance&quot;, color = &quot;#6D7C83&quot;, size = 3, hjust = 0.5,vjust = 0.5, fontface = &quot;bold&quot;) gg &lt;- gg + annotate(geom = &quot;text&quot;, x = 55, y = 25, label = &quot;Début du\nreigne&quot;, color = &quot;#6D7C83&quot;, size = 3, hjust = 0.5,vjust = 0.8, fontface = &quot;bold&quot;)gg &lt;- gg + annotate(geom = &quot;text&quot;, x = 54,y = 40, label = &quot;Décès&quot;, color = &quot;#6D7C83&quot;, size = 3, hjust = 0.5,vjust = 0.5, fontface = &quot;bold&quot;) 我的膝盖现在还疼，为啥？我跪着学完的。]]></content>
      <categories>
        <category>R 可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ggplot2 绘制热图]]></title>
    <url>%2F2019%2F08%2F17%2Fggplot2-%E7%BB%98%E5%88%B6%E7%83%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[ggplot2 绘制热图 参考：哪里不会搜哪里，哈哈哈 其实归根到底就是全文要敲用判断和 paste() 或者 paste0() tidyverse::case_when() factor(): 重定义因子顺序 takecolor 下载链接 也可以看我简书 可能是 R 语言最全调色板：Paletteer 包 和 自己慢慢收集 的详细关于配色的操作12345678910111213141516171819202122232425262728library(tidyverse)library(reshape2)a &lt;- matrix(rnorm(90), 9, 10)colnames(a) &lt;- letters[1:10]rownames(a) &lt;- letters[1:9]data &lt;- melt(a)data &lt;- data %&gt;% mutate(text = case_when( # 一定要 get 到 case_when() 函数奥秘 value &gt; 0 ~ paste(round(value, 2), &quot;\n*&quot;), # round() 只保留两位小数 value &lt;= 0 ~ paste(round(value, 2), &quot;\n**&quot;)))data$new_Var1 &lt;- factor(data$Var1, levels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;)) # 重新排序因子，决定坐标轴出图顺序data$new_Var2 &lt;- factor(data$Var2, levels = rev(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;))) # 同上ggplot(data, aes(new_Var1, new_Var2)) + geom_tile(aes(fill = value), colour = &quot;grey&quot;, size = 1)+ scale_fill_gradient2(low = &quot;#5C5DAF&quot;,mid = &quot;white&quot;,high = &quot;#EA2E2D&quot;) + # 这里可以用 windowns 小工具 takecolor 取色，看中哪个文章就吸哪个文章 # 比如这篇 https://www.nature.com/articles/nmeth.1902 geom_text(aes(label=text),col =&quot;black&quot;,size = 5) + theme_minimal() + # 不要背景 theme(axis.title.x=element_blank(), # 去掉 title axis.ticks.x=element_blank(), # 去掉x 轴 axis.title.y=element_blank(), # 去掉 y 轴 axis.text.x = element_text(angle = 45, hjust = 1, size = 14, face = &quot;bold&quot;), # 调整x轴文字，字体加粗 axis.text.y = element_text(size = 14, face = &quot;bold&quot;)) + #调整y轴文字 labs(fill =paste0(&quot; * p &lt; 0&quot;,&quot;\n\n&quot;,&quot;** p &gt; 0&quot;,&quot;\n\n&quot;,&quot;Correlation&quot;)) + # 修改 legend 内容 scale_x_discrete(position = &quot;top&quot;) # 将 X 轴放置在最上面]]></content>
      <categories>
        <category>R 可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的 hexo next 博客搭建]]></title>
    <url>%2F2019%2F08%2F01%2F%E6%88%91%E7%9A%84-hexo-next-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[[TOC] 参考链接 3.9 教程 Next主题美化：https://siriusq.top/Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96 好评: https://me.idealli.com/post/e8d13fc.html hexo 安装1234npm install -g hexo-cli# 检查安装是否成功：hexo version 初始化 hexo1234hexo initnpm install eslint@4.x babel-eslint@8 --save-devnpm install 启动本地服务器1hexo s 浏览器访问网址： http://localhost:4000/ 部署到远端 github 安装 hexo-deployer-git 插件 1npm install hexo-deployer-git --save 需要设置文件：特别关键 修改 _config.yml（在站点目录下）。文件末尾修改为 1234567# 部署到 github 远端# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/qliugithub/qliugithub.github.io.git branch: master 推送到GithubPages 12hexo ghexo d 至此框架就搭好了next 主题主题下载1git clone https://github.com/theme-next/hexo-theme-next themes/next 更改站点配置文件_config.yml 的 theme 字段，为主题文件夹的名称：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 更新到远端1hexo clean &amp; hexo g &amp; hexo d 设置 语言 编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： 1language: zh-Hans 设置 菜单 编辑 主题配置文件，修改以下内容： 设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译 下载12hexo initnpm install --save core-js@^3 设置 语言 更改站点配置文件_config.yml 的 theme 字段，为主题文件夹的名称：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 设置名称 与语言12345678# Sitetitle: qliu's blogsubtitle: 二货潜不学习description: 就是不学习keywords:author: 不学生物的二货潜language: zh-CNtimezone: 设置 菜单 编辑 主题配置文件 设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml（{language} 为你所使用的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改对应的翻译文件languages/zh-CN.yml，在 menu 字段下添加一项： 123456789menu: home: / || home # 第二个home 表示对应的图标 about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 设置 头像 把图片放入 themes/next/source/images 下打开themes/next/_config.yml文件，搜索 Sidebar Avatar 关键字设置为 url: /images/epigenetics.png 友情链接 打开 themes/next/_config.yml 文件,搜索关键字social ,然后添加社交站点名称与地址即可。 12345678910111213social: GitHub: https://github.com/qliugithub || github #E-Mail: mailto:yourname@gmail.com || envelope #Weibo: https://weibo.com/yourname || weibo #Google: https://plus.google.com/yourname || google Twitter: https://twitter.com/BioQliu || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 简书: https://www.jianshu.com/u/ab6dcc5b9d97 || car 友情链接图标 参考链接：https://www.jianshu.com/p/efbeddc5eb19 图标库：http://fontawesome.dashgame.com/ 12345678910# 打开主题配置文件themes/next/_config.yml，搜索social_icons:,在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可# http://fontawesome.dashgame.com/social_icons: enable: true icons_only: false transition: false Github: github 简书: car Twitter: twitter 点击页面浮出文字 ①、鼠标特效很简单，打开\themes\next\layout\_layout.swig文件,在末尾&lt; /body&gt;前添加如下代码： 123456789101112131415161718192021222324252627282930 &lt;script type=&quot;text/javascript&quot;&gt;/* 鼠标特效 */var a_idx = 0;jQuery(document).ready(function($) &#123; $(&quot;body&quot;).click(function(e) &#123; var a = new Array(&quot;我&quot;, &quot;真的&quot;, &quot;不&quot;, &quot;不喜欢&quot;, &quot;生物&quot;, &quot;不做实验&quot;, &quot;不当咸鱼&quot;); var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; $i.css(&#123; &quot;z-index&quot;: 999999999999999999999999999999999999999999999999999999999999999999999, &quot;top&quot;: y - 20, &quot;left&quot;: x, &quot;position&quot;: &quot;absolute&quot;, &quot;font-weight&quot;: &quot;bold&quot;, &quot;color&quot;: &quot;#ff6651&quot; &#125;); $(&quot;body&quot;).append($i); $i.animate(&#123; &quot;top&quot;: y - 180, &quot;opacity&quot;: 0 &#125;, 1500, function() &#123; $i.remove(); &#125;); &#125;);&#125;); &lt;/script&gt; 添加萌萌哒123456789101112131415161718192021# 安装插件# https://juejin.im/post/5bebfe51e51d45332a456de0#heading-27npm install --save hexo-helper-live2d# 我选择 hijiki# 将以下代码添加到根目录站点配置文件`_config.yml，修改&lt;你喜欢的模型名字&gt;live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model: use: live2d-widget-model-hijiki display: position: right width: 15 height: 30 mobile: show: true 炫酷动态背景 参考链接：https://blog.csdn.net/sunshine940326/article/details/69933696 添加修改代码next/layout/_layout.swig在&lt;/body&gt;之前加上 123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 在菜单中添加链接。编辑next\_config.yml文件 主题配置文件中找到canvas_nest，设置成ture 1canvas_nest: ture 在网站底部加上访问量 参考链接：https://chrischen0405.github.io/2018/09/11/post20180911/ 打开themes/next/layout/_partial/footer.swig文件,在copyright前加入以下代码： 1&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; 一般显示站点访问量在页脚，所以我们选择在footer.swig中添加标签，同时我们还可以通过修改主题配置来方便选择是否显示访问量，步骤如下：首先，我们在next主题下的_config.yml中加入以下配置： 12# visitors countcounter: true 之后可以更改counter的值为false来隐藏页脚的访问量统计，然后，我们在themes/next/layout/_partial/footer.swig中添加以下代码： 123456&#123;% if theme.footer.counter %&#125; &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;&#123;% endif %&#125; 统计功能 hexo 3.9以前报废：新链接 https://github.com/theme-next/hexo-symbols-count-time 3.9 版本 1npm install hexo-symbols-count-time --save 站点下 _config.yml 添加 Activate this plugin in hexo’s _config.yml (which locates in the root dir of your blog) by enabled any option: 123456symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false next 主题下 _config.yml 添加 1234567symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 suffix: mins. RSS 参考链接：https://juejin.im/post/5c6d20b151882562934c9962#heading-42 在Hexo根目录，安装插件运行如下命令： 1npm install --save hexo-generator-feed 在站点配置文件_config.yml中，添加如下内容： 123# Extensions## Plugins: https://hexo.io/plugins/plugins: hexo-generate-feed 然后再主题配置文件中配置rss 1rss: /atom.xml 添加评论模块 来必利 https://www.livere.com/my_Livere 参考链接： https://zhuanlan.zhihu.com/p/33617273 https://www.tryagin.cn/HEXO%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%8A%E6%9D%A5%E5%BF%85%E5%8A%9B%EF%BC%88livere%EF%BC%89%E8%AF%84%E8%AE%BA/#%E6%8E%A5%E5%85%A5%E5%90%88%E9%80%82%E7%9A%84%E8%AF%84%E8%AE%BA 顶级参考链接：https://juejin.im/post/5bebfe51e51d45332a456de0#heading-29 点击上方的安装，选择免费的city版本。 打开主题目录下的/themes/next/_config.yml配置文件，定位到livere_uid字段，粘贴上刚刚复制的UID 打开 next 主题下 _config.yml文件，定位到 livere_uid，添加下列信息 MTAyMC80NTM4OS8yMTkwMQ1234567891011#### 显示当前浏览进度- 修改`themes/*/_config.yml`，把 false 改为` true：` ```shell # Back to top in sidebar b2t: true # Scroll percent label in b2t button scrollpercent: true 链接：https://juejin.im/post/5bebfe51e51d45332a456de0 添加网站底部跳动的心 1.在主题配置文件中（themes/*/_config.yml）,更改footer; 1垃圾功能毁我重来。 页脚统计信息 NexT 6.x.x 直接添加了统计的信息，直接将next主题文件夹中的 _config.yml 中 busuanzi 统计打开 即可。 搜索功能 安装插件hexo-generator-searchdb，如下： 1npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置，如下： 1search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能，如下： 1# Local searchlocal_search: enable: true 添加标签页面 新建页面 12hexo new page tags# INFO Created: D:\swRJ\hexo_1\source\tags\index.md 设置页面类型，编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云 1234title: 标签date: 2019-07-18 20:46:32type: "tags"--- 如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如： 12345title: 标签date: 2019-07-18 20:46:32type: &quot;tagscomments: false--- 添加分类12345678hexo new page categories# INFO Created: D:\swRJ\hexo_1\source\categories\index.md# 设置页面类型，编辑刚新建的页面，将页面的类型设置为 categoriestitle: 分类date: 2019-07-18 20:51:49type: &quot;categories&quot;--- 新建页面的模板 参考链接：https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/ 主目录的 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。 所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 翻页设置 共有两处，用于控制每一页显示多少篇博文 12345678910111213# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 12 order_by: -date# Pagination## Set per_page to 0 to disable paginationper_page: 12pagination_dir: page per_page:后设置博文数量，0代表不翻页全部平铺显示 代码块高亮主题 Next主题内置了tomorrow代码高亮主题，一共有五个，可以去Tomorrow查看预览效果，在下面的highlight_theme:中改成自己想要的即可 1234# Code Highlight theme# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night 博文压缩 参考来源：https://www.jianshu.com/p/393d067dba8d 打开themes/next/_config.yml文件, 搜索 auto_excerpt, 将 false 改为 true 12345# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150 修改文章底部的那个带 # 号的标签 123456789101112131415# 编辑 themes/next/layout/_macro/post.swig，搜索rel="tag"&gt;#，将 # 换成&lt;i class="fa fa-tag"&gt;&lt;/i&gt;# 修改下面为 &lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt;a&lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125;&lt;/div&gt; 分类页面添加年分类卡 找到 next 主题下的\layout\category.swig文件，查找for post in page.posts可以看到如下代码： 123&#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post) &#125;&#125;&#123;% endfor %&#125; 选中这三行，修改为: 12345678910111213141516&#123;% for post in page.posts %&#125;&#123;# Show year #&#125;&#123;% set year %&#125;&#123;% set post.year = date(post.date, 'YYYY') %&#125;&#123;% if post.year !== year %&#125; &#123;% set year = post.year %&#125; &lt;div class="collection-title"&gt; &lt;h2 class="archive-year motion-element" id="archive-year-&#123;&#123; year &#125;&#125;"&gt;&#123;&#123; year &#125;&#125;&lt;/h2&gt; &lt;/div&gt;&#123;% endif %&#125;&#123;# endshow #&#125; &#123;&#123; post_template.render(post) &#125;&#125;&#123;% endfor %&#125; 然后在文件末尾加上如下代码： 12 写文 1hexo new post &quot;my first post&quot; 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:---]]></content>
  </entry>
  <entry>
    <title><![CDATA[Qubit 2.0 测 ChIP DNA 浓度]]></title>
    <url>%2F2019%2F07%2F21%2FQbit-2-0-%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Qubit 2.0 Mix 配置 DNAHS : HS = 1 : 199 一个样品一般是 1 ul DNAHS + 199 ul HS DNA : Mix = 1 ：199 即最后测浓度样本为 1 ul DNA + 199 ul Mix 我们这里需要测了 6 个样本的 DNA 浓度，所以需要配置 7 * Mix Mix : 7 ul DNAHS + 1393 ul HS 每一个样本吸取 1 ul 加入 199 ul Mix Qubit 2.0 仪器使用 打开 Qubit 2.0 ， 点击 dsDNA High Sensitivity 参数。 在弹出的 界面会询问你是否 Read new Starndard ，Yes 和 No 界面选择 No 。 然后点击 Calculate Stock ConC 。 将样本体积（ Volume of Sample Used ）设置为 1 ul（ 因为我们只取了 1 ul DNA 加入到 Mix 中进行浓度测定 ），然后就可以看到样品浓度了。 一张图说明流程 最终浓度为 Sample 浓度（ ng/ul ） ZH 8.28 7 0.29 CK1 0.632 CK2 0.42 J1 0.5 J2 0.432 这浓度。。。。准备重做吧！]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>ChIP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ChIP 实验]]></title>
    <url>%2F2019%2F07%2F19%2FChIP-%E5%AE%9E%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[[TOC] Buffer 配置 Markdown 语法 下标：H&lt;sub&gt;2&lt;/sub&gt; ：H2 需要单独预配的试剂： 所有物品均为进口 七个 250 ml 蓝盖瓶 提前一天预约 4℃ 落地离心机和 4℃ 离心机 1 ml 、200 ul、10ul 进口枪头各准备一盒 2 L ddH2O 注意：保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接 预配 50 ml 1M MgCl2 *：0.05 L * 1 M * 分子量 = g *MgCl2 溶于 50 ml ddH2O 预配 50 ml 20% Triton X-100：10 ml Triton X-100 + 40 ml ddH2O （ 难溶，摇过夜，提前一天配好 ） 预配 50 ml 2.5M LiCl：LiCL 的相对分子量为 42.3 g/M 。0.05 L * 2.5 M/L * 423.3 g/M = 5.29875 g ≈ 5.3 g 溶于 50ml ddH2O 预配 50ml 0.2M NaHCO3：NaHCO&lt;sub&gt;3&lt;/sub&gt; 的相对分子量为 84 g/M 。需要质量：0.05 L * 0.2 M/L * 84 g/M = 0.84 g ，溶于 50ml ddH2O 50 ml 离心管 无水乙醇、50 ml 离心管 75% 乙醇 ChIP-BUFFER-1Extraction buffer-1 Extraction buffer-1 500 ml 4℃ 0.4 M Sucrose （公用） 68.46 g 1M Tris-HCl PH8.0（公用） 5 ml 1M MgCl2 （自己配） 175 ul 5mM β-ME （公用） 500 ul Protease inhibitors （公用） 1 tablet（ EDTA-free ） 0.1 mM PMSF （公用） 500 ul dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加到 500 ml 注意： Protease inhibitors、PMSF、β-ME 这三种现加。这里需要自己预配 50 ml 1M MgCl2 Extraction buffer-2 Extraction buffer-2 200 ml 4℃ 0.25 M Sucrose （公用） 17.12 g 1M Tris-HCl PH8.0（公用） 2 ml 1M MgCl2 （自己配） 2 ml 20% Triton X-100（自己配） 10 ml 5mM β-ME （公用） 70 ul Protease inhibitors （公用） 半粒 0.1 mM PMSF （公用） 200 ul dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加到 200 ml 注意： Protease inhibitors、PMSF、β-ME 这三种现加。20% Triton X-100 提前一天配好。 Extraction buffer-3 ( 粘稠难溶 ) Extraction buffer-2 40 ml 4℃ 1.7 M Sucrose （公用） 23.28 g 1M Tris-HCl PH8.0（公用） 400 ul 1M MgCl2 （自己配） 80 ul 20% Triton X-100（自己配） 300 ul 5mM β-ME （公用） 14 ul Protease inhibitors （公用） 半粒 0.1 mM PMSF （公用） 40 ul dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加到 40 ml ChIP BUFFER-2Nuclear lysis buffer Nuclear lysis buffer 5 ml 4℃ 1M Tris-HCl PH8.0（公用） 250 ul 0.5 M EDTA（公用） 100 ul 10% NaCl （公用） 100 ul（ 可不加 ） 10% SDS（公用） 500 ul（ 最后一步加 ） 0.1 mM PMSF （公用） 1 ul Protease inhibitors （公用） 50ul （ 一颗溶于 1 ml ddH2O） dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加到 5 ml （ 加水 4.1 ml ） 注意现配现用，最后一步再加 SDS Low salt wash buffer Low salt wash buffer 100 ml 4℃ 5M NaCl（公用） 3 ml 10% SDS（公用） 1 ml（ 最后一步加 ） 20% Triton X-100 （自己配） 5 ml 0.5M EDTA（公用） 400 ul 1M Tris-HCl PH8.0（公用） 2 ml dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加水到 100 ml #### High salt wash buffer High salt wash buffer 100 ml 4℃ 5M NaCl（公用） 10 ml 10% SDS（公用） 1 ml（ 最后一步加 ） 20% Triton X-100 （自己配） 5 ml 0.5M EDTA（公用） 400 ul 1M Tris-HCl PH8.0（公用） 2 ml dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加水到 100 ml LiCl wash buffer LiCl wash buffer 100 ml 4℃ 2.5M LiCl（自己配，固体在冰箱二层，白瓶子） 10 ml 0.5% NP-40（公用） 1 ml（ 最后一步加 ） 0.25% sodium deoxycholate （自己配，冰箱二层，白瓶子） 1g 0.5M EDTA（公用） 200 ul 1M Tris-HCl PH8.0（公用） 1 ml dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加水到 100 ml 注意这里需要自己配置 2.5M LiCl：LiCL 的相对分子量为 42.3 g/M 。 需要质量：0.05 L * 2.5 M/L * 423.3 g/M = 5.29875 g ≈ 5.3 g ChIP BUFFER-3TE buffer 1x TE buffer 50 ml 4℃ 1M Tris-HCl PH8.0（公用） 1 ml 0.5M EDTA（公用） 100 ul dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加水到 50 ml ChIP Chromatin Elution buffer ChIP Chromatin Elution buffer 10 ml RT 10% SDS（公用） 1 ml 0.2M NaHCO3（自己配置，固体在 sigma 进口橱柜） 5 ml dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 4 ml 注意这里需要自己配置 0.2M NaHCO3：NaHCO&lt;sub&gt;3&lt;/sub&gt; 的相对分子量为 84 g/M 。 需要质量：0.05 L * 0.2 M/L * 84 g/M = 0.84 g ChIP antibody dilution and magnetic beads （Protein A）washing buffer dilution &amp; wash buffer 100 ml 4 ℃ 5M NaCl（公用） 3.34 ml 20% Triton X-100 （自己配） 5.5 ml 0.5M EDTA（公用） 240 ul 1M Tris-HCl PH8.0（公用） 1.67 ml dd water （保证为 18.2Ω 的超纯水，可去楼下 A 座棉花组接） 加水到 100 ml 实验操作1 甲醛交联 称取 2 g 组织，加入30 ml 1% 的甲醛（ EBI 稀释 ）进行交联 30 min （ 感觉这个时间有点长 ）。 加入 2 ml 2M 甘氨酸，混匀，重新放入真空仪（ 注意：置于冰盒中，用海绵塞住样品上方 ），抽真空 5 min 终止交联。 用 dd 水清洗三遍，取出，用纸吸干水分。至于液氮中，-70℃ 保存。 2 染色质抽提 提前一天预约 4℃ 落地离心机和 4℃ 离心机 准备一个大的冰盒。 准备漏斗（ 一个样品一个 ）、50ml 尖底离心管（第一次过滤用）、50ml 圆底离心管（第二次过滤用） 检查膜布是否还有 提前 1h 4 ℃ 冷冻落地离心机 50 ml 进口离心管中加入 30 ml EBI，冰上预冷。 取出交联好的样品，研磨成粉末。在 2.1 中预冷的 30 ml EBI 中加入粉末，迅速摇匀，埋入冰盒中。冰盒放置在摇床上摇 30 min （ 摇床速度高速 ） 将单层的膜布至于干净漏斗上，将样品进行过滤至新的 50ml 尖底离心管中，再用双层膜布将过滤后的样品过滤到 50ml 圆底离心管中。 离心之前，用 EBI，平衡所有离心管，保证重量一致。4℃ 离心 4000 rpm 20 min。 4℃ 落地离心机使用： 4000 rpm JA17 转子 20min 参数：ACCEL：MAX，DECEL：MAX 离心结束后，小心去除离心管，倒去上清（ 注意：倒的方向背离沉淀方向 ）。加入 1ml EB2，对准离心管壁沉淀反复轻柔吹洗混匀进行重悬，将重悬液移至 1.5 ml 进口离心管中（注意：冰上操作，尽量不要产生气泡）。 4℃ 离心 12000g 5min，倒掉上清，加 EB2 反复清洗，直至染色质沉淀泛白（冰上，重复 EB2 重悬，离心大概 5~ 6 次左右）。（此步骤大约 40 min） 最后一次离心完后，用枪吸干上清，加入 500 ul EB3（ 样品少时候可只加 300 ul **），在冰上**重悬染色质沉淀。 取一新的 1.5 ml 离心管，加入 500 ul EB3（ *样品少时候可只加 300 ul，不过前后要对应 *），小心将2.6中的重悬液加入到其中。 4℃ 离心 16000g 1h 离心完后，吸干上清，加入 400ul 2x Nuclear lysis buffer （ 样品少时候可只加 300 ul，不过前后要对应 ** ）重悬裂解** 15~20 min，取 15 ul 作为超声波处理前的染色质对照，用于检测染色质的完整性（ 可不做 ），剩余样品进行超声波打断，都至于 -80 ℃ 保存 这里需要看加完 400 ul 后，样品不浓稠即可，不然影响后续超声波破碎。 3 染色质超声波化 准备：50 ml 离心管 无水乙醇、50 ml 离心管 75% 乙醇 将剩余样品取出，进行超声波打断。 超声波操作：A506 ，打一盒冰，加冰至超声波仪器黑线附近，冰不融化即可将样品加入进行超声波打断。调整每次五分钟，其他按键不需要变动。（第一次 5 ~ 6 次左右，即 30 min，每一次后需要加冰，使温度保持低温，然后吸取 15ul 检测打断效果。不过一般是需要打断 2h 左右。根据后面纯化的 DNA 跑胶检测再进行决定超声波多久。） 取 15 ul 超声波后的染色质与之前取出的未进行超声波的 15ul 染色质分别加入：465 ml ddH2O ** 、20 ul 5M NaCl。65℃ 解交联（ **仪器在照胶室 ）6h 以上。剩下的染色质 -80℃ 保存。 仪器操作：RPM 80 Temp 65℃ 这里可以加一步：解交联后再加入 10ul RNAaes(1:50 加) 42℃ 进行孵育 1h，去除 RNA。 取出解交联染色质，加入等体积的 24:1 氯仿：异戊酸 500 ul，手动混匀 5 min，然后 12000 rpm 5min。小心吸取上清 400 ul 左右至新的离心管中，加入 80 ul 3M NaAC、720 ul 预冷无水乙醇、2 ul 肝糖原（ -20℃ 的 二抗盒子中，白色管子 ），-70℃ 沉淀 1 h 或者 -20℃ 过夜。 4℃ 12000 rpm 20 min，弃上清（ 倒扣纸面倒干净液体 ），加入 1 ml 75% 乙醇。4℃ 12000 rpm *5 min , 弃上清，再稍离心，用枪小心吸干残液。离心管至于超净台吹干 15 min （ *看不到液体即可 ），加入 20 ul ddH2O ，37℃ 烘箱溶解 15 min。2% 琼脂糖凝胶进行检测。 进行离心 20min 过程可以制备一条 2% 的胶。 若片段大小不是集中在 200bp 附近，继续进行超声波打断，然后纯化检测片段大小。 4 染色质前处理和免疫共沉淀 需要准备 Protein A Beads、 磁力架、静音混合器、ChIP dilution &amp; wash buffer Protein A Beads 洗涤（ 一般晚上进行 ）（ 涉及 Beads 的都是磁力架操作 ） 40 ul Beads（ 样品少时候加入 20ul 即可 ） + *1 ml ChIP dilution &amp; wash buffer * 洗涤三次 第一次上下混匀 Beads 与 buffer，然后在磁力架上摇晃吸附 Beads **直至澄清，不离开磁力架**倒掉清液。 第二次加入 1 ml Buffer, 取下架子，混匀，放置在 4℃ 冰箱中的静音混合器上 10 min 洗涤。然后在磁力架上摇晃吸附 Beads **直至澄清，不离开磁力架**倒掉清液。 第三次加入 1ml Buffer ，混匀，放置在磁力架上，上下颠倒数次至澄清，倒掉清液，用枪吸干残液，去掉气泡。 加入 40 ul Buffer ，沿 Beads 上面缓慢加入（ 由于加的 Buffer 量上，所以对着 Beads, 后续操作均不对着 Beads 加 ），尽量不要产生气泡，放置冰上。 进行 4 后，将超声波后染色质进行 4℃ 12000rpm 5min，吸上清，取 20 ul 作为 Input ，剩下的加入到洗涤后的 Beads 中，混匀。然后放置在 4℃ 冰箱中静音混合器 2h。然后 4℃ 12000rpm 5min，放置在磁力架上，吸上清至一个新的 1.5 ml 离心管中。 在步骤 5 中静音混合器上 2h 的过程中，可以将吸出的 Input 再解交联纯化，测每个样品的 DNA 浓度，进行定量。 DNA 浓度 后面定量加入的染色质 100 ng/ul（ 最高浓度 ） 100 ul 50 ng/ul 200 ul （ 相对最高浓度加的量 ） 抗体孵育（ 一般晚上 十点 ~ 十一点左右做 ）（ 涉及 Beads 的都是磁力架操作 ） 50 ul Beads + *1 ml ChIP dilution &amp; wash buffer * 洗涤三次 第一次上下混匀 Beads 与 buffer，然后在磁力架上摇晃吸附 Beads **直至澄清，不离开磁力架**倒掉清液。 第二次加入 1 ml Buffer（ 对着 Beads 对面壁加 ）, 取下架子，混匀，放置在 4℃ 冰箱中的静音混合器上 10 min 洗涤。然后在磁力架上摇晃吸附 Beads **直至澄清，不离开磁力架**倒掉清液。 第三次加入 1 ml Buffer（ 对着 Beads 对面壁加 ）, 取下架子，混匀，放置在 4℃ 冰箱中的静音混合器上 10 min 洗涤。然后在磁力架上摇晃吸附 Beads **直至澄清，不离开磁力架**倒掉清液，吸掉残液、去掉气泡。 加 560 ul Buffer + 5 ul 抗体，仍在磁力架上先混匀抗体，然后再离开磁力架将 Beads 混匀，4℃ 冰箱中的静音混合器 过夜（ 6 h ）。 抗体与 Beads 洗涤（ 涉及 Beads 的都是磁力架操作 ） 孵育好的抗体同之前一样，用 1 ml ChIP dilution &amp; wash buffer 洗涤 四次 （ 这一步要保证洗涤干净），一快三慢。 倒掉上清液，加入 900ul ChIP dilution &amp; wash buffer + 相对定量的体积的染色质（ 100ul ） ，摇匀，4℃ 冰箱中的静音混合器 6 h。 5洗涤 孵育结束后，将离心管至于磁力架上，直接拿磁力架倒掉管中上清，用枪吸干残液、去掉气泡。 按顺序加入下列 washing Buffer 各 1 ml，分别洗涤两次，一快一慢。 快：颠倒离心管，将 Beads 完全重悬后即可放在磁力架上，弃上清 慢：颠倒离心管，将 Beads 完全重悬后放在 4℃ 冰箱中的静音混合器上 10 min，然后再将其放置在磁力架上上下颠倒几次，弃上清，用枪吸干残液、去掉气泡 low salt wash buffer 一次快洗，一次慢洗 10 min High salt wash buffer 一次快洗，一次慢洗 10 min LiCl salt 一次快洗，一次慢洗 10 min TE buffer 一次快洗，一次慢洗 10 min 最后一次 TE buffer 后，磁力架上完全吸干上清，去掉气泡。对着 Beads 加 250 ul Elution buffer，重悬混匀，65℃ 15 min，瞬离将盖子上液体离心下去，磁力架上吸上清于另一干净的 1.5 ml 管子中。 再对着 Beads 加 250 ul Elution buffer，重悬混匀，65℃ 15 min，瞬离将盖子上液体离心下去，磁力架上吸上清于上一步 3 ** 的 **1.5 ml 管子中。 在上面两次的上清混合液中加入 20 ul 5M NaCl，65℃ 解交联过夜（ 6h 以上） 6 纯化 纯化 在解交联产物中加入以下试剂，45℃ 1 h 10 ul 0.5M EDTA 20 ul 1M Tris-HCl PH 7.5 2 ul Protein K 5 ul RNAase 纯化 DNA ，步骤同前 3.3 — 3.4。 取出解交联染色质，加入等体积的 24:1 氯仿：异戊酸 500 ul，手动混匀 5 min，然后 12000 rpm 20min。小心吸取上清 400 ul （ 宁愿少吸点也不要吸到杂质 ）左右至新的离心管中，加入 80 ul 3M NaAC、720 ul 预冷无水乙醇（ 一定要保证干净，尽量在这一步重新配置 ）、2 ul 肝糖原（ -20℃ 的 二抗盒子中，白色管子 ），-80℃ 沉淀 6 h （ 推荐 -80 ℃，尽量多沉淀 ） 4℃ 12000 rpm 20 min，弃上清（ 倒扣纸面倒干净液体 ），加入 1 ml 75% 乙醇 （ 一定要保证干净，尽量在这一步重新配置）。4℃ 12000 rpm 20 min , 弃上清，再加入 1 ml 干净的无水乙醇 4℃ 12000 rpm 20 min *，弃上清，离心管至于超净台吹干 15 min （ *白色沉淀变透明，即看不到即可 ），加入 15 ul ddH2O（ 一定要干净 ） ，弹匀，使尽量覆盖分散在管壁。]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>ChIP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文献收集测试]]></title>
    <url>%2F2019%2F07%2F18%2FPaper%2F</url>
    <content type="text"><![CDATA[胁迫、转座子与表观修饰 In planta chromatin immunoprecipitation in Zymoseptoria tritici reveals chromatin-based regulation of putative effector gene expression 2019 BioRxiv 转座子与表观修饰：TE and H3K4me2、H3K27me3、H3K9me3 Stress-driven transposable element de-repression dynamics in a fungal pathogen 2019 BioRxiv 转座子表达与胁迫：MITE and LTR-Gypsy elements Low temperature triggers genome-wide hypermethylation of transposable elements and centromeres in maize 2019 BioRxiv 玉米中低温诱导转座子 DNA 高甲基化 Excess light priming in Arabidopsis thaliana with altered DNA methylomes 2019 Biorxiv DNA甲基化组的维持受损，但对重复的过量光的光保护和引发是有效的 Immune receptor genes and pericentromeric transposons as targets of common epigenetic regulatory elements 2018 Plant Journal 拟南芥：sRNAs 可以控制 PRR / NLR 基因和远端的 pericentromeric TEs，并在它们被激活时优先使 TEs 沉默 DNA甲基化 The Catalytic Core of DEMETER Guides Active DNA Demethylation in Arabidopsis 2019 Biorxiv 拟南芥：DME Seed genome hypomethylated regions are enriched in transcription factor genes 2018 PNAS DNA甲基化低的区域有转录因子的富集： hypomethylated regions, or DNA methylation valleys (DMVs) DNA 甲基化、组蛋白（去）乙酰化、转座子、转录因子 Distinct Contribution of DNA Methylation and Histone Acetylation to the Genomic Occupancy of Transcription Factors 人：2019 BioRxiv 在 DNA 甲基化缺失的细胞中 HDAC 的抑制效果显著增加，DNA甲基化和组蛋白去乙酰化在很大程度上独立地抑制转录因子结合和基因表达]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>组蛋白</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
